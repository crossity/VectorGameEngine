#define true  1
#define false 0

#define Width  200
#define Height 200

struct vec3 {
  num x
  num y
  num z
}

struct vec2 {
  num x
  num y
}

fn main {
  num run = true

  struct vec3 p
  : p.x = 0
  : p.y = 2
  : p.z = 0
  nums p[3]
  
  nums rend_p[2]
  struct vec2 rend_p
  
  while run =>
    color 0, 0, 0
    clear
    color 255, 0, 0

    @ RotateX 0, 0, 0, 0.001, p.x, p.y, p.z @
    ->> p
    @ RotateZ 0, 0, 0, 0.001, p[0], p[1], p[2] @
    ->> p
    :p.x = p[0]
    :p.y = p[1]
    :p.z = p[2]

    @ Render p.x, p.y, p.z @ ->> rend_p
    : rend_p.x = rend_p[0]
    : rend_p.y = rend_p[1]
    @ DrawDot rend_p.x, rend_p.y @

    render
  end
}

fn Render num x num y num z {
  nums p[2]
  : p[0] = Width * (x - z + 4) / (8 - 2 * z)
  : p[1] = Height * (4 - z - y) / (8 - 2 * z) 
  return nums p
}

fn RotateX num cx num cy num cz num angle num px num py num pz {
  nums p[3]

  num sn
  num cs

  :sn sin angle
  :cs cos angle

  :pz -= cz
  :py -= cy

  num ynew = py * cs - pz * sn
  num znew = py * sn + pz * cs

  :pz = znew + cz
  :py = ynew + cy

  :p[0] = px
  :p[1] = py
  :p[2] = pz

  return nums p
}

fn RotateZ num cx num cy num cz num angle num px num py num pz {
  nums p[3]

  num sn
  num cs

  :sn sin angle
  :cs cos angle

  :px -= cx
  :py -= cy

  num ynew = py * cs - px * sn
  num xnew = py * sn + px * cs

  :px = xnew + cz
  :py = ynew + cy

  :p[0] = px
  :p[1] = py
  :p[2] = pz

  return nums p
}

fn DrawDot num x num y {
  : x -= 1
  : y -= 1
  putpix x ,y
  : x += 1
  putpix x, y
  : x += 1
  putpix x, y
  : x -= 2
  : y += 1
  putpix x, y
  : x += 1
  putpix x, y
  : x += 1
  putpix x, y
  : x -= 2
  : y += 1
  putpix x, y
  : x += 1
  putpix x, y
  : x += 1
  putpix x, y
}
